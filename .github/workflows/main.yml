---

name: GPT Code Review on Entire PR Diff

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  run_code_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # PR 전체 diff 추출
      - name: Fetch PR Diff
        run: |
          git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge
          git diff origin/${{ github.event.pull_request.base.ref }}...origin/${{ github.event.pull_request.head.ref }} > pr_diff.txt

      # code-review-prompt.txt 파일 읽기
      - name: Read Prompt file
        id: prompt
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.github/workflows/code-review-prompt.txt

      # PR diff 읽기
      - name: Read PR Diff
        id: diff
        uses: juliangruber/read-file-action@v1
        with:
          path: ./pr_diff.txt

      # prompt와 diff를 합쳐 하나의 combined_prompt.txt 파일 생성
      - name: Combine Prompt and Diff
        run: |
          cat <<'EOF' > combined_prompt.txt
          ${{ steps.prompt.outputs.content }}

          ----- PR DIFF START -----
          ${{ steps.diff.outputs.content }}
          ----- PR DIFF END -----
          EOF

      # curl을 이용하여 OpenAI API 호출
      - name: Run GPT Code Review Once via curl
        run: |
          # jq를 사용해 combined_prompt.txt의 모든 내용을 하나의 JSON 문자열로 변환합니다.
          # -R: raw input
          # -s: 모든 입력을 하나의 문자열로 취급
          # 이로써 combined_prompt.txt 안의 개행, 따옴표 등이 모두 JSON에 맞게 이스케이프됩니다.
          JSON_PAYLOAD=$(jq -Rs --arg system_msg "You are a senior developer experienced in Next.js, TypeScript, clean architecture, and SOLID principles, providing a thorough code review based on the given instructions." '{
            "model": "gpt-4o-mini",
            "messages": [
              {
                "role": "system",
                "content": $system_msg
              },
              {
                "role": "user",
                "content": .
              }
            ],
            "temperature": 0.7,
            "max_tokens": 16384
          }' combined_prompt.txt)

          RESPONSE=$(curl https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$JSON_PAYLOAD")
          
          # RESPONSE를 Github Actions 출력 변수로 설정
          echo "response=$(echo $RESPONSE.)" >> $GITHUB_OUTPUT
          echo "$RESPONSE"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # PR에 추가
      - name: Post comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.payload.pull_request ? context.payload.pull_request.number : parseInt("${{ github.event.inputs.pr_number }}", 10);
            
            // steps.gpt_call.outputs.response에는 전체 JSON 응답이 들어있다고 가정
            const responseJson = JSON.parse(`${{ steps.gpt_call.outputs.response }}`);
            const content = responseJson.choices[0].message.content;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: content
            });